// Semantic grid components
// ========================

// These class placeholders can be used to convert any element into
// grid component. To use extend element with appropriate placeholder.
// It will automatically take care of the parent and descending components
// as long as the correct grid components are used.

// The structure of the grid is as follows:

// %l-container           –  A grid is always contained in one of these
//                           They use global grid settings and can be overriden with:
//    %l-grid-pixel       –  Force pixel grid
//    %l-grid-fluid       –  Force fluid grid
//    %l-gutterless       –  Collapse column margins (gutters)
//
// %l-row                 –  Grid consists of a number of rows
//                           They are required for correct column margins, but can be omitted,
//                           in which case the grid with no `%l-row` becomes gutterless
//
// %l-col                 –  Column, the unit of the grid
//    %l-col-<$i>         –  Column size (e.g. `%l-col-4` spans four single columns, including three gutters)
//    %l-col-full         –  100% width
//    %l-col-half         –  50% width
//    %l-col-quarter      –  25% width
//    %l-col-eighth       –  12.5% width
//    %l-col-sixteenth    –  6.25% width
//    %l-col-center       -  Center column
//
// l-col-from-left-<$i>   –  Offset column by <column size> from left
// l-col-to-left-<$i>     –  Offset column by <column size> to left (negative margin)
// l-col-from-right-<$i>  –  Offset column by <column size> from right
// l-col-to-right-<$i>    –  Offset column by <column size> to right (negative margin)
//
// %l-last-col-right      –  This settings forces last column to float to right, which helps to eliminate
//                           pixel gap caused by rounding in fluid grids and ensures first and last column
//                           occupy full width of grid container.
//                           Applied to grid container (@extend).

// For examples of usage of these components see `scaffolding.scss` file.


// # Individual grid components

// Grid container
%l-container {
  @include grid-container;
  @include box-sizing(content-box);
  @include group;

  // Defines inner grid container (nested grid)
  %l-container {
    min-width: 0;
    width: 100%;
  }

  // Defines grid row
  %l-row {
    @include grid-row;
    @include group;
  }

  // Defines grid row of forced fluid grid
  &%l-grid-fluid > %l-row, {
    @include grid-row(fluid);
  }
  // Defines grid row of forced pixel grid
  &%l-grid-pixel > %l-row {
    @include grid-row(pixel);
  }

  // Always set nested grids to fluid
  &%l-container %l-container > %l-row, {
    @include grid-row(fluid);
  }

  // Defines row of gutterless grid
  %l-gutterless {
    &, %l-row {
      margin: {
        left: 0;
        right: 0;
      }
    }
  }
}


// Defines columns
%l-col {
  @include grid-column;

  %l-gutterless & {
    margin-left: 0;
    margin-right: 0;
  }
}

// Float last column to right if `%l-last-col-right` extended
// Applied to `%l-container`
%l-col + %l-col:last-child {
  %l-last-col-right%l-container > &,
  %l-last-col-right%l-container > %l-row & {
    float: right;
  }
}


// Column spans
@for $i from 1 through $grid-total-columns {
  %l-col-#{$i} {
    @include grid-column-width($i, $grid-type);

    // Force pixel grid
    %l-grid-pixel & {
      @include grid-column-width($i, pixel);
      @include grid-column-margins(pixel);
    }
    // Force fluid grid
    %l-grid-fluid & {
      @include grid-column-width($i, fluid);
      @include grid-column-margins(fluid);
    }

    // Force gutterless grid
    %l-gutterless &,
    // Apply gutterless grid on columns without rows
    %l-container > & {
      @include grid-column-width($i, $grid-type, 0);
      @include grid-column-margins(0);
    }

    // Force gutterless when row is absent
    %l-grid-pixel > & {
      @include grid-column-width($i, pixel, 0, false);
      @include grid-column-margins(0);
    }
    %l-grid-fluid > & {
      @include grid-column-width($i, fluid, 0, false);
      @include grid-column-margins(0);
    }
  }
}


// Fluid grid subdivisions
%l-col-full {
  width: 100%;
}
%l-col-half {
  width: 50%;
}
%l-col-third {
  width: 33.33333%;
}
%l-col-quarter {
  width: 25%;
}
%l-col-eighth {
  width: 12.5%;
}
%l-col-sixteenth {
  width: 6.25%;
}


// Centre column
%l-col-center {
  %l-container &,
  %l-grid-pixel &,
  %l-grid-fluid &,
  %l-gutterless & {
    float: none;
    margin-left: auto;
    margin-right: auto;
  }
}


// Defines column margins
// Only applied to descendants of rows
%l-row %l-col {
  @include grid-column-margins;
}


// TODO Improve
// Column offsets
%l-container {
  @for $i from 1 through $grid-total-columns {

    // ## Grid with margins
    // Default grid offsets
    & > %l-row %l-col {
      // From left
      &%l-col-from-left-#{$i} {
        @include grid-offset-by-column($i, left, positive, $grid-type);
      }

      // To left
      &%l-col-to-left-#{$i} {
        @include grid-offset-by-column($i, left, negative, $grid-type);
      }

      // From right
      &%l-col-from-right-#{$i} {
        @include grid-offset-by-column($i, right, positive, $grid-type);
      }

      // To right
      &%l-col-to-right-#{$i} {
        @include grid-offset-by-column($i, right, negative, $grid-type);
      }
    }

    // Pixel grid offsets
    &%l-grid-pixel > %l-row %l-col {
      // From left
      &%l-col-from-left-#{$i} {
        @include grid-offset-by-column($i, left, positive, pixel);
      }

      // To left
      &%l-col-to-left-#{$i} {
        @include grid-offset-by-column($i, left, negative, pixel);
      }

      // From right
      &%l-col-from-right-#{$i} {
        @include grid-offset-by-column($i, right, positive, pixel);
      }

      // To right
      &%l-col-to-right-#{$i} {
        @include grid-offset-by-column($i, right, negative, pixel);
      }
    }

    // Fluid grid offsets
    &%l-grid-fluid > %l-row %l-col {
      // From left
      &%l-col-from-left-#{$i} {
        @include grid-offset-by-column($i, left, positive, fluid);
      }

      // To left
      &%l-col-to-left-#{$i} {
        @include grid-offset-by-column($i, left, negative, fluid);
      }

      // From right
      &%l-col-from-right-#{$i} {
        @include grid-offset-by-column($i, right, positive, fluid);
      }

      // To right
      &%l-col-to-right-#{$i} {
        @include grid-offset-by-column($i, right, negative, fluid);
      }
    }

    // ## gutterless grid
    %l-gutterless %l-col {
      // From left
      &%l-col-from-left-#{$i} {
        @include grid-offset-by-column($i, left, positive, gutterless);
      }

      // To left
      &%l-col-to-left-#{$i} {
        @include grid-offset-by-column($i, left, negative, gutterless);
      }

      // From right
      &%l-col-from-right-#{$i} {
        @include grid-offset-by-column($i, right, positive, gutterless);
      }

      // To right
      &%l-col-to-right-#{$i} {
        @include grid-offset-by-column($i, right, negative, gutterless);
      }
    }
  }
}
