// -----------------------------------------------------------------------------
// â€¢ Scaffolding                                    Tyom Semonov <mail@tyom.net>
// -----------------------------------------------------------------------------
// .container       - outer columns container (centers within the containing element)
// .container .row  - inner columns container

// .column-borders    - show borders between columns (set on container containing .column(s))
// .column, .columns  - use for individual columns. (.one, .two, .three, ... .twenty-four to span columns)

// .column.last       - treat as last column in the row, float right
// .column.end        - treat as end column, float left as the previous columns
// .column.centered   - centre column

// .flush-right       - flush element to right
// .flush-left        - flush element to left

// .<one>-from-left   - offset column by (one, two, three, ... twenty-four) column spans

// .show-grid         - show grid guide (useful for debugging and layout building)
// -----------------------------------------------------------------------------

@import "bedrock/grid";

$number-words: one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,
              thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen,
              twenty,twentyone,twentytwo,twentythree,twentyfour;

// Rows
.container {
  @include grid-container;
  .row {
    @include grid-row;
  }
}

// Show grid on .container if enabled
@if $grid-guides {
  .container {
    @extend .show-grid;
    .row:before {
      display: none;
    }
  }
}

// Borders
.column-borders {
  @include grid-column-borders($grid-gutter-medium);

  @include large-screen {
    @include grid-column-borders($grid-gutter-large);
  }
}


// Columns
.col {
  @include grid-column;
}

// Centred column
.col.centered, .col.centered:last-child {
  @include grid-column(centered);
}

// Last column
.col:last-child, .col.last {
  @include grid-column(last);
}

// Ending column (follows others)
.col.end {
  @include grid-column(end);
}

// Columns in the inner row
.row .col {
  @include grid-column-margins(inner);
}

// Column sizes
@for $i from 1 through length($number-words) {
  .#{nth($number-words, $i)} {
    @include grid-column-width($i, $grid-type, 0);
  }
  .row .#{nth($number-words, $i)} {
    @include grid-column-width($i, $grid-type);
  }
  .flexible .#{nth($number-words, $i)} {
    @include grid-column-width($i, flexible);
  }
}


// Offsets:
// - Left
@for $i from 1 through $grid-total-columns {
  .row .col.#{nth($number-words, $i)}-from-left,
  .row .col.#{nth($number-words, $i)}-from-left.end {
    @include grid-offset-by-column($i, left);
  }
}
// - Right (attribute selector to override other class modifiers, such as .last)
@for $i from 1 through $grid-total-columns {
  .row .col.#{nth($number-words, $i)}-from-right,
  .row .col.#{nth($number-words, $i)}-from-right.end,
  .row .col.#{nth($number-words, $i)}-from-right.last {
    @include grid-offset-by-column($i, right);
  }
}


// Grid debugging
.show-grid {
  @include grid-show-guides($grid-medium);

  @include large-screen {
    @include grid-show-guides($grid-large);
  }
  &.front:before {
    z-index: auto;
  }
}
