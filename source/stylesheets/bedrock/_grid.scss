// -----------------------------------------------------------------------------
// • Bedrock Grid Mixins                            Tyom Semonov <mail@tyom.net>
// -----------------------------------------------------------------------------
// » grid-row($type: outer)
//   Converts into grid row
//    $type: outer       - first outer containing row
//    $type: inner       - inner container rows
//
// » grid-column($variation: normal)
//   Converts into grid column (generic for any size)
//    $column: last      - flushed right,
//    $column: end       - last but follows previous columns
//    $column: inner     - column in inner row
//    $column: centered  - centered column
//
// » grid-column-width($span: 1)
//   Renders column width (specific size)
// » grid-offset-by-column($span: 1, $direction: left)
//   Calculates column offset by $span columns
//    $span: <integer>    - span number of columns
//    $direction: left    - offset from left
//    $direction: right   - offset from right
//
// » grid-column-borders($color: rgba(black, .2))
//   Renders borders on descendent columns
//    $color: value       - border color (#hex or Sass colour function)
//
// -----------------------------------------------------------------------------

@import "functions";
@import "clearfix";
@import "responsive";
@import "grid-debug";

// Grid defaults
// --------------

$grid-medium:         980px       !default;
$grid-large:          1200px      !default;

$grid-type:           pixel       !default;
$grid-total-columns:  12          !default;
$grid-baseline:       20px        !default;
$grid-desired-gutter: 20px        !default;

$grid-gutter-medium:  grid-column-gutter($grid-medium, $grid-desired-gutter);
$grid-gutter-large:   grid-column-gutter($grid-large, $grid-desired-gutter);
$grid-half-gutter-m:  $grid-gutter-medium / 2;
$grid-half-gutter-l:  $grid-gutter-large / 2;
$grid-column-medium:  grid-single-column-width($grid-medium, $grid-total-columns, $grid-gutter-medium);
$grid-column-large:   grid-single-column-width($grid-large, $grid-total-columns, $grid-gutter-large);

$grid-column: $grid-column-medium  !default;

$grid-guides:            false     !default;
$grid-guides-color:      #c84e5b   !default;
$grid-guides-opacity:    .2        !default;
$grid-guides-position:   back      !default;

// @debug "gutter medium:" $grid-gutter-large;
// @debug "column medium:" $grid-column-large;

// Mixins
// ------

// Grid container to set grid bounds
@mixin grid-container($width: $grid-medium) {
  @include clearfix;
  @if $grid-type != flexible {
    width: $width;
    min-width: $width;
    max-width: 100%;
    @include large-screen {
      width: $grid-large;
    }
  }
  margin: {
    left: auto;
    right: auto;
  }
}

// Converts element into grid row
@mixin grid-row {
  @include clearfix;
  width: auto;
  max-width: none;
  margin: {
    left:  -$grid-half-gutter-m;
    right: -$grid-half-gutter-m;
  }
  @include large-screen {
    margin: {
      left:  -$grid-half-gutter-l;
      right: -$grid-half-gutter-l;
    }
  }
  // Inverse margins
  @include grid-column-margins(inner, -1);
}

// Converts into grid column
// $variation - can be normal, last, end, inner or centered
@mixin grid-column($variation: normal) {
  @if $variation == last {
    float: right;
  } @else if $variation == end {
    float: left;
  } @else if $variation == centered {
    float: none;
  } @else {
    min-height: 1px;
    float: left;
  }
  @include grid-column-margins($variation);
}

// Apply column margins
@mixin grid-column-margins($variation, $modifier: 1) {
  @if $variation != collapse {
    @if $variation == centered {
      margin-left:  auto;
      margin-right: auto;
    } @else if $variation == flexible {
      margin-left:  grid-calculate-percentage($grid-half-gutter-m * $modifier);
      margin-right: grid-calculate-percentage($grid-half-gutter-m * $modifier);
    } @else {
      @if $variation == inner {
        @if $grid-type == flexible {
          margin-left:  grid-calculate-percentage($grid-half-gutter-m * $modifier);
          margin-right: grid-calculate-percentage($grid-half-gutter-m * $modifier);
        } @else {
          margin-left:  $grid-half-gutter-m * $modifier;
          margin-right: $grid-half-gutter-m * $modifier;

          @include large-screen {
            margin-left:  $grid-half-gutter-l * $modifier;
            margin-right: $grid-half-gutter-l * $modifier;
          }
        }
      }
    }
  }
}

// Calculate single column width (in pixels) multipled by number of columns it spans (indluding gutters)
@mixin grid-column-width($span: 1) {
    width: grid-column-span-width($span, $grid-column-medium, $grid-gutter-medium);
    @include large-screen {
      width: grid-column-span-width($span, $grid-column-large, $grid-gutter-large);
    }
}

// Calculate single column width in percent
@mixin grid-column-width-flexi($span: 1, $collapse-margins: false) {
  // Calculate width in percentages from the total grid width and gutter (based on medium),
  // offset by provided gutter width
  @if $collapse-margins {
    width: grid-calculate-percentage(grid-column-span-width($span, $grid-column-medium + $grid-gutter-medium, 0));
  } @else {
    width: grid-calculate-percentage(grid-column-span-width($span, $grid-column-medium, $grid-gutter-medium));
  }
}

// Calculate offset width based on number of columns it spans (including gutters)
// $span, $direction
@mixin grid-offset-by-column($span: 1, $direction: left) {
  margin-#{$direction}: grid-column-span-width($span, $grid-column-medium, $grid-gutter-medium) + ($grid-gutter-medium * 3 / 2);
  @include large-screen {
    margin-#{$direction}: grid-column-span-width($span, $grid-column-large, $grid-gutter-large) + ($grid-gutter-large * 3 / 2);
  }
  @if $grid-type == flexible {
    margin-#{$direction}: grid-calculate-percentage(grid-column-span-width($span, $grid-column-medium, $grid-gutter-medium) + ($grid-gutter-medium * 3 / 2));
  }
}


// Renders borders between columns (except the first and the last ones)
// $grid-size, $color
@mixin grid-column-borders($column-gutter, $color: #ccc, $style: solid, $size: 1px) {
  .col {
    position: relative;
  }
  .col:before, .col:after {
    content: "";
    position: absolute;
    width: 1px;
    top: 0;
    bottom: 0;
    border: 0 $style $color;
  }
  .col:before {
    border-left-width: $size;
    left: -$column-gutter/2 - $size/2 - 1;
  }
  .col:after {
    border-right-width: $size;
    right: -$column-gutter/2 - $size/2 - 1;
  }
  .col:first-child:before, .col:last-child:after {
    display: none;
  }
}
